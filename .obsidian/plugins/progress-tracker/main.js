/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var Y=Object.prototype.hasOwnProperty;var G=(f,p)=>{for(var e in p)S(f,e,{get:p[e],enumerable:!0})},z=(f,p,e,i)=>{if(p&&typeof p=="object"||typeof p=="function")for(let t of q(p))!Y.call(f,t)&&t!==e&&S(f,t,{get:()=>p[t],enumerable:!(i=W(p,t))||i.enumerable});return f};var J=f=>z(S({},"__esModule",{value:!0}),f);var _={};G(_,{default:()=>P});module.exports=J(_);var o=require("obsidian");function V(f){var e,i;if(window.DataviewAPI)return window.DataviewAPI;let p=(i=(e=f.plugins)==null?void 0:e.plugins)==null?void 0:i.dataview;return p&&p.api?p.api:f.plugins.enabledPlugins.has("dataview")?(console.log("Dataview plugin is enabled but API is not available yet"),null):(console.log("Dataview plugin is not enabled"),null)}var X={showDebugInfo:!1,progressColorScheme:"default",lowProgressColor:"#e06c75",mediumProgressColor:"#e5c07b",highProgressColor:"#61afef",completeProgressColor:"#98c379",lowProgressThreshold:33,mediumProgressThreshold:66,highProgressThreshold:99,showUpdateAnimation:!0,updateAnimationDelay:300,editorChangeDelay:500,keyboardInputDelay:100,checkboxClickDelay:200,maxTabsHeight:"auto",autoUpdateMetadata:!0,autoChangeStatus:!0,autoUpdateFinishedDate:!0,autoUpdateKanban:!0,kanbanCompletedColumn:"Complete",statusTodo:"Todo",statusInProgress:"In Progress",statusCompleted:"Completed",kanbanAutoDetect:!0,kanbanSpecificFiles:[],kanbanExcludeFiles:[],kanbanSyncWithStatus:!0,autoAddToKanban:!1,autoAddKanbanBoard:"",autoAddKanbanColumn:"Todo"},P=class extends o.Plugin{constructor(){super(...arguments);this.dvAPI=null;this.sidebarView=null;this.lastActiveFile=null;this.lastFileContent="";this.dataviewCheckInterval=null}async onload(){await this.loadSettings(),this.applyMaxTabsHeightStyle(),this.registerView("progress-tracker",e=>this.sidebarView=new E(e,this)),this.addRibbonIcon("bar-chart-horizontal","Progress Tracker",()=>{this.activateView()}),this.addSettingTab(new F(this.app,this)),this.checkDataviewAPI(),this.registerEvent(this.app.workspace.on("file-open",e=>{e&&(this.lastActiveFile=e,setTimeout(async()=>{await this.updateLastFileContent(e),this.sidebarView&&this.sidebarView.updateProgressBar(e)},300))})),this.registerEvent(this.app.workspace.on("editor-change",(0,o.debounce)(async(e,i)=>{if(i instanceof o.MarkdownView&&this.sidebarView){let t=e.getValue();(t.includes("- [")||t.includes("- [ ]")||t.includes("- [x]")||this.lastFileContent.includes("- [")||this.lastFileContent.includes("- [ ]")||this.lastFileContent.includes("- [x]"))&&this.lastActiveFile&&(this.lastActiveFile=i.file,this.sidebarView.updateProgressBar(i.file,t),this.lastFileContent=t)}},this.settings.editorChangeDelay))),this.registerDomEvent(document,"keydown",e=>{let i=this.app.workspace.getActiveViewOfType(o.MarkdownView);i&&i.getMode()==="source"&&["Enter","Space","]","x","X","Backspace","Delete"].includes(e.key)&&setTimeout(()=>{let t=i.editor.getValue();(t.includes("- [")||t.includes("- [ ]")||t.includes("- [x]"))&&(this.lastActiveFile=i.file,this.sidebarView&&this.sidebarView.updateProgressBar(i.file,t),this.lastFileContent=t)},this.settings.keyboardInputDelay)}),this.registerDomEvent(document,"click",e=>{let i=e.target;i&&i.tagName==="INPUT"&&i.classList.contains("task-list-item-checkbox")&&setTimeout(async()=>{let t=this.app.workspace.getActiveFile();if(t&&this.sidebarView){let s=await this.app.vault.read(t);this.lastActiveFile=t,this.sidebarView.updateProgressBar(t,s),this.lastFileContent=s}},this.settings.checkboxClickDelay)}),setTimeout(()=>{this.activateView(),setTimeout(async()=>{let e=this.app.workspace.getActiveFile();e&&this.sidebarView&&(this.settings.showDebugInfo&&console.log("Initial file load after plugin start:",e.path),await this.updateLastFileContent(e),this.sidebarView.updateProgressBar(e,void 0,!0))},1500)},1e3),this.addCommand({id:"clear-completed-files-cache",name:"Clear completed files cache",callback:()=>{this.sidebarView&&(this.sidebarView.clearCompletedFilesCache(),new o.Notice("Completed files cache cleared. Files can trigger completion notifications again."))}})}checkDataviewAPI(){this.dvAPI=V(this.app),this.dvAPI||(this.dataviewCheckInterval=window.setInterval(()=>{this.dvAPI=V(this.app),this.dvAPI&&(this.dataviewCheckInterval&&(clearInterval(this.dataviewCheckInterval),this.dataviewCheckInterval=null),this.sidebarView&&this.lastActiveFile&&this.sidebarView.updateProgressBar(this.lastActiveFile))},2e3))}async updateLastFileContent(e){e&&(this.lastFileContent=await this.app.vault.read(e))}async activateView(){try{let{workspace:e}=this.app,i=e.getLeavesOfType("progress-tracker");if(i.length>0){e.revealLeaf(i[0]);return}e.onLayoutReady(()=>{let t=e.getLeftLeaf(!1);t&&(t.setViewState({type:"progress-tracker",active:!0}),e.revealLeaf(t))})}catch(e){console.error("Error activating view:",e),new o.Notice("Error activating Task Progress Bar view. Please try again later.")}}onunload(){this.dataviewCheckInterval&&(clearInterval(this.dataviewCheckInterval),this.dataviewCheckInterval=null),this.sidebarView&&this.sidebarView.clearCompletedFilesCache()}async loadSettings(){this.settings=Object.assign({},X,await this.loadData())}async saveSettings(){try{await this.saveData(this.settings),this.applyMaxTabsHeightStyle()}catch(e){console.error("Error saving settings:",e),new o.Notice("Error saving settings. See console for details.")}}applyMaxTabsHeightStyle(){try{let e=document.getElementById("progress-tracker-max-tabs-height");e&&e.remove();let i=document.createElement("style");i.id="progress-tracker-max-tabs-height",this.settings.showDebugInfo||(i.textContent=`
					.workspace-tabs.mod-top:has(.progress-tracker-leaf) {
						max-height: ${this.settings.maxTabsHeight} !important;
					}
				`,document.head.appendChild(i)),this.settings.showDebugInfo&&console.log(`Applied max-tabs-height: ${this.settings.maxTabsHeight} to Progress Tracker view`)}catch(e){console.error("Error applying max tabs height style:",e)}}},E=class extends o.ItemView{constructor(e,i){super(e);this.currentFile=null;this.isVisible=!1;this.lastUpdateTime=0;this.lastFileUpdateMap=new Map;this.initialLoadComplete=!1;this.completedFilesMap=new Map;this.plugin=i}getViewType(){return"progress-tracker"}getDisplayText(){return"Task progress bar"}getIcon(){return"bar-chart-horizontal"}async onOpen(){this.isVisible=!0,this.initialLoadComplete=!1;let e=this.leaf;e&&e.containerEl&&e.containerEl.addClass("progress-tracker-leaf");let i=this.containerEl.children[1];i.empty(),i.createDiv({cls:"task-progress-container"}).createEl("p",{text:"Loading task progress...",cls:"loading-indicator"})}async updateProgressBar(e,i,t=!1){if(!e)return;this.lastFileUpdateMap.set(e.path,Date.now());let s=Date.now();if(!t&&s-this.lastUpdateTime<100)return;this.lastUpdateTime=s,this.currentFile=e;let n=this.containerEl.children[1].querySelector(".task-progress-container");if(n){(t||!this.initialLoadComplete)&&(n.empty(),this.initialLoadComplete=!0),this.plugin.settings.showUpdateAnimation&&n.classList.add("updating");try{if(i)this.hasTasksInContent(i)?this.createProgressBarFromString(n,i,e):n.querySelector(".no-tasks-message")||(n.empty(),n.createEl("p",{text:"No tasks found in this file",cls:"no-tasks-message"}));else{let l=await this.plugin.app.vault.read(e);this.hasTasksInContent(l)?this.createProgressBarFromString(n,l,e):(n.querySelector(".no-tasks-message")||(n.empty(),n.createEl("p",{text:"No tasks found in this file",cls:"no-tasks-message"})),this.plugin.settings.showDebugInfo&&console.log("No tasks found in file:",e.path))}}catch(l){console.error("Error updating progress bar:",l),n.empty(),n.createEl("p",{text:`Error updating progress bar: ${l.message}`})}finally{this.plugin.settings.showUpdateAnimation&&setTimeout(()=>{n.classList.remove("updating")},this.plugin.settings.updateAnimationDelay)}}}hasTasksInContent(e){let i=/- \[[x ]\]/i,t=/[-*] \[[x ]\]/i;return i.test(e)||t.test(e)}async createProgressBarFromString(e,i,t){var s;try{if(this.plugin.settings.showDebugInfo&&(console.log(`Creating progress bar for file: ${t.path}`),console.log(`Content length: ${i.length}`)),!this.plugin.dvAPI){e.querySelector(".dataview-warning-compact")||(e.empty(),e.createDiv({cls:"dataview-warning-compact"}).createEl("span",{text:"Dataview not available",cls:"dataview-warning-text"}));return}let n=(i.match(/- \[ \]/g)||[]).length,l=(i.match(/- \[x\]/gi)||[]).length,r=n+l,g=0,u=0;if(r===0&&(g=(i.match(/[-*] \[ \]/g)||[]).length,u=(i.match(/[-*] \[x\]/gi)||[]).length,r=g+u),this.plugin.settings.showDebugInfo&&(console.log(`Task counts - incomplete: ${n}, completed: ${l}, total: ${r}`),(g>0||u>0)&&console.log(`Using relaxed regex - found tasks: ${g+u}`)),r===0){e.querySelector(".no-tasks-message")||(e.empty(),e.createEl("p",{text:"No tasks found in this file",cls:"no-tasks-message"}));return}let d=n>0||l>0?l:u,m=Math.round(d/r*100),C=!1;this.plugin.settings.autoChangeStatus&&(C=await this.updateStatusBasedOnProgress(t,m)),this.plugin.settings.autoUpdateKanban&&(C||!this.completedFilesMap.has(t.path))&&await this.updateKanbanBoards(t,d,r),m===100&&this.plugin.settings.autoUpdateMetadata?this.completedFilesMap.has(t.path)||(await this.updateFileMetadata(t),this.completedFilesMap.set(t.path,!0)):m<100&&this.completedFilesMap.has(t.path)&&this.completedFilesMap.delete(t.path),this.plugin.settings.autoAddToKanban&&this.plugin.settings.autoAddKanbanBoard&&r>0&&!this.completedFilesMap.has(t.path)&&await this.addFileToKanbanBoard(t);let h=e.querySelector(".progress-layout"),w=e.querySelector(".progress-stats-compact");(!h||!w)&&(e.empty(),h=e.createDiv({cls:"progress-layout"}),h.createEl("div",{cls:"progress-percentage-small"}),h.createDiv({cls:"pt-progress-bar-container"}).createDiv({cls:"progress-element"}).createDiv({cls:"progress-value"}),w=e.createDiv({cls:"progress-stats-compact"}));let y=h.querySelector(".progress-percentage-small");y&&y.setText(`${m}%`);let b=e.querySelector(".progress-value");b&&(b.hasAttribute("data-has-transition")||(b.style.transition="width 0.3s ease-in-out, background-color 0.3s ease",b.setAttribute("data-has-transition","true")),b.style.width=`${m}%`,this.applyProgressColor(b,m));let v=e.querySelector(".progress-element");if(v&&v.setAttribute("data-percentage",m.toString()),w&&(w.empty(),w.createSpan({text:`${d}/${r} tasks`})),this.plugin.settings.showDebugInfo){let c=e.querySelector(".debug-info");c?c.empty():c=e.createDiv({cls:"debug-info"}),c.createEl("p",{text:"Debug info:"}),c.createEl("p",{text:`File: ${(s=this.currentFile)==null?void 0:s.path}`}),c.createEl("p",{text:`Incomplete tasks: ${r-d}`}),c.createEl("p",{text:`Completed tasks: ${d}`}),c.createEl("p",{text:`Total tasks: ${r}`}),c.createEl("p",{text:`Percentage: ${m}%`}),c.createEl("p",{text:`Update time: ${new Date().toISOString()}`}),c.createEl("p",{text:`Color scheme: ${this.plugin.settings.progressColorScheme}`})}else{let c=e.querySelector(".debug-info");c&&c.remove()}}catch(a){console.error("Error creating progress bar from string:",a),e.empty(),e.createEl("p",{text:`Error creating progress bar: ${a.message}`})}}applyProgressColor(e,i){let t=this.plugin.settings;if(t.progressColorScheme==="default"){e.style.backgroundColor="";return}let s="";i===100?s=t.completeProgressColor:i>=t.mediumProgressThreshold?s=t.highProgressColor:i>=t.lowProgressThreshold?s=t.mediumProgressColor:s=t.lowProgressColor,e.style.backgroundColor!==s&&(e.style.backgroundColor=s),this.plugin.settings.showDebugInfo&&console.log(`Applied color for ${i}%: 
				Color scheme: ${t.progressColorScheme},
				Low threshold: ${t.lowProgressThreshold}%, 
				Medium threshold: ${t.mediumProgressThreshold}%, 
				High threshold: ${t.highProgressThreshold}%,
				Applied color: ${s}`)}clearCompletedFilesCache(){this.completedFilesMap.clear(),this.plugin.settings.showDebugInfo&&console.log("Cleared completed files cache")}async updateStatusBasedOnProgress(e,i){if(!e||!this.plugin.settings.autoChangeStatus)return!1;try{let t=!1,s=this.plugin.settings.statusInProgress;return i===0?s=this.plugin.settings.statusTodo:i===100&&(s=this.plugin.settings.statusCompleted),await this.app.fileManager.processFrontMatter(e,a=>{a.status!==s&&(a.status=s,t=!0),i<100&&this.plugin.settings.autoUpdateFinishedDate&&a.finished&&(delete a.finished,t=!0)}),t&&this.plugin.settings.showDebugInfo&&console.log(`Updated status to "${s}" based on progress ${i}% for file:`,e.path),t}catch(t){return console.error("Error updating status based on progress:",t),!1}}async updateFileMetadata(e){try{await this.app.fileManager.processFrontMatter(e,i=>{let t=!1,s=new Date().toISOString().split("T")[0];if(this.plugin.settings.autoChangeStatus){let a=this.plugin.settings.statusCompleted;i.status!==a&&(i.status=a,t=!0,this.plugin.settings.showDebugInfo&&console.log(`Updating status to ${a} in file:`,e.path))}return this.plugin.settings.autoUpdateFinishedDate&&i.finished!==s&&(i.finished=s,t=!0,this.plugin.settings.showDebugInfo&&console.log(`Updating finished date to ${s} in file:`,e.path)),t})}catch(i){console.error("Error updating file metadata:",i),this.plugin.settings.showDebugInfo&&new o.Notice(`Error updating metadata for ${e.basename}: ${i.message}`)}}async updateKanbanBoards(e,i,t){try{if(!this.plugin.settings.autoUpdateKanban||t===0)return;let s=this.calculateStatusFromProgress(i,t);await this.waitForCacheUpdate(e);let a=await this.getStatusFromYaml(e);a&&(s=a,this.plugin.settings.showDebugInfo&&console.log(`Using status from YAML: ${s} instead of calculated status`)),this.plugin.settings.showDebugInfo&&(console.log(`Searching for Kanban boards that might contain ${e.path}...`),console.log(`Current status is: ${s} (${i}/${t} tasks)`));let n=await this.processKanbanBoards(e,s);n>0&&new o.Notice(`Updated ${n} Kanban board${n>1?"s":""} to move ${e.basename} to ${s} column`)}catch(s){console.error("Error updating Kanban boards:",s),this.plugin.settings.showDebugInfo&&(console.error("Error details:",s),new o.Notice(`Error updating Kanban boards: ${s.message}`))}}calculateStatusFromProgress(e,i){return i===0?this.plugin.settings.statusTodo:e===0?this.plugin.settings.statusTodo:e===i?this.plugin.settings.statusCompleted:this.plugin.settings.statusInProgress}async processKanbanBoards(e,i){let t=e.path.toLowerCase(),s=this.plugin.app.vault.configDir.toLowerCase();if(t.includes(`${s}/plugins/progress-tracker`)||t.includes("kanban"))return this.plugin.settings.showDebugInfo&&console.log(`Skipping plugin or kanban file for kanban processing: ${e.path}`),0;let a=this.plugin.app.vault.getMarkdownFiles(),n=0;for(let l of a){if(l.path===e.path)continue;let r=await this.plugin.app.vault.read(l);if(!this.isKanbanBoard(l)||!this.containsFileReference(r,e))continue;this.plugin.settings.showDebugInfo&&console.log(`Found Kanban board "${l.path}" that references "${e.path}"`),await this.moveCardInKanbanBoard(l,r,e,i)!==r&&n++}return n}escapeRegExp(e){return e?e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"):""}containsFileReference(e,i){let t=i.path,s=t.replace(/\.md$/,""),a=i.basename;return[new RegExp(`\\[.*?\\]\\(${this.escapeRegExp(t)}\\)`,"i"),new RegExp(`\\[\\[${this.escapeRegExp(s)}(\\|.*?)?\\]\\]`,"i"),new RegExp(`\\[\\[${this.escapeRegExp(a)}(\\|.*?)?\\]\\]`,"i"),new RegExp(`\\b${this.escapeRegExp(t)}\\b`,"i"),new RegExp(`\\b${this.escapeRegExp(a)}\\b`,"i")].some(l=>l.test(e))}async moveCardInKanbanBoard(e,i,t,s){try{await this.waitForCacheUpdate(t);let a=await this.parseKanbanBoard(e);if(!a||Object.keys(a).length===0)return this.plugin.settings.showDebugInfo&&console.log(`Could not parse Kanban board structure in ${e.path}`),i;let n;if(this.plugin.settings.kanbanSyncWithStatus?(n=Object.keys(a).find(h=>h.toLowerCase()===s.toLowerCase()),n||(n=this.findClosestColumnName(Object.keys(a),s))):s===this.plugin.settings.statusCompleted&&(n=Object.keys(a).find(h=>h.toLowerCase()===this.plugin.settings.kanbanCompletedColumn.toLowerCase())),!n)return this.plugin.settings.showDebugInfo&&(console.log(`Could not find column for status "${s}" in Kanban board ${e.path}`),console.log(`Available columns: ${Object.keys(a).join(", ")}`)),i;this.plugin.settings.showDebugInfo&&console.log(`Target column for status "${s}" is "${n}"`);let l=!1,r=i,g=t.path,u=g.replace(/\.md$/,""),d=t.basename,m=[`\\[.*?\\]\\(${this.escapeRegExp(g)}\\)`,`\\[\\[${this.escapeRegExp(u)}(\\|.*?)?\\]\\]`,`\\[\\[${this.escapeRegExp(d)}(\\|.*?)?\\]\\]`,`\\b${this.escapeRegExp(g)}\\b`,`\\b${this.escapeRegExp(d)}\\b`],C=new RegExp(m.join("|"),"i");for(let h in a){if(h.toLowerCase()===n.toLowerCase())continue;let w=a[h];for(let y=0;y<w.items.length;y++){let b=w.items[y];if(C.test(b.text)){this.plugin.settings.showDebugInfo&&console.log(`Found card in column "${h}" that references file ${t.path}`);let v=new RegExp(`## ${this.escapeRegExp(h)}\\s*\\n`),c=r.match(v);if(!c)continue;let D=c.index+c[0].length,A=/^## /gm;A.lastIndex=D;let K=A.exec(r),M=K?K.index:r.length,N=r.substring(D,M),R=this.escapeRegExp(b.text.trim()),U=new RegExp(`(^|\\n)(${R})(\\n|$)`),x=N.match(U);if(!x){this.plugin.settings.showDebugInfo&&console.log(`Could not find card in column ${h}`);continue}let k=D+x.index+(x[1]===`
`?1:0),T=k+b.text.length;if(T<=k||k<0||T>r.length){console.error(`Invalid card position: start=${k}, end=${T}, contentLength=${r.length}`);continue}let H=r.substring(0,k),O=r.substring(T);r=H+O;let j=new RegExp(`## ${this.escapeRegExp(n)}\\s*\\n`),I=r.match(j);if(!I)continue;let L=I.index+I[0].length;r=r.substring(0,L)+b.text+`
`+r.substring(L),l=!0,this.plugin.settings.showDebugInfo&&console.log(`Moved card for ${t.path} from "${h}" to "${n}" in ${e.path}`);break}}if(l)break}return l&&r!==i?(await this.plugin.app.vault.modify(e,r),r):i}catch(a){return console.error("Error moving card in Kanban board:",a),this.plugin.settings.showDebugInfo&&console.error("Error details:",a),i}}findClosestColumnName(e,i){let t=i.toLowerCase(),s={todo:["to do","todo","backlog","new","not started","pending","open","to-do"],"in progress":["progress","doing","working","ongoing","started","in work","active","current","wip"],completed:["done","complete","finished","closed","resolved","ready","completed"]},a=e.find(n=>n.toLowerCase()===t);if(a)return a;if(t===this.plugin.settings.statusTodo.toLowerCase())for(let n of e){let l=n.toLowerCase();if(s.todo.some(r=>l.includes(r)||r===l))return n}else if(t===this.plugin.settings.statusInProgress.toLowerCase())for(let n of e){let l=n.toLowerCase();if(s["in progress"].some(r=>l.includes(r)||r===l))return n}else if(t===this.plugin.settings.statusCompleted.toLowerCase())for(let n of e){let l=n.toLowerCase();if(s.completed.some(r=>l.includes(r)||r===l))return n}for(let[n,l]of Object.entries(s))if(l.some(r=>t.includes(r)||r.includes(t)))for(let r of e){let g=r.toLowerCase();if(l.some(u=>g.includes(u)||u.includes(g)))return r}for(let n of e)if(n.toLowerCase()===t)return n;for(let n of e)if(n.toLowerCase().includes(t)||t.includes(n.toLowerCase()))return n;if(t===this.plugin.settings.statusTodo.toLowerCase()&&e.length>0)return e[0]}async getStatusFromYaml(e){let i=this.app.metadataCache.getFileCache(e);if(!(i!=null&&i.frontmatter))return this.plugin.settings.showDebugInfo&&console.log(`No frontmatter found for file: ${e.path}`),null;try{let t=i.frontmatter.status;if(typeof t=="string"&&t.trim())return this.plugin.settings.showDebugInfo&&console.log(`Status found for ${e.path}: ${t}`),t.trim();this.plugin.settings.showDebugInfo&&console.log(`No valid status in frontmatter for file: ${e.path}`)}catch(t){console.error(`Error accessing frontmatter for ${e.path}:`,t),this.plugin.settings.showDebugInfo&&console.error("Error details:",t)}return null}async waitForCacheUpdate(e,i=1e3){return new Promise((t,s)=>{let a=setTimeout(()=>{this.plugin.settings.showDebugInfo&&console.log(`Timeout waiting for cache update for ${e.path}`),t()},i),n=l=>{l.path===e.path&&(this.app.metadataCache.off("changed",n),clearTimeout(a),this.plugin.settings.showDebugInfo&&console.log(`Cache updated for ${e.path}`),t())};this.app.metadataCache.on("changed",n)})}async parseKanbanBoard(e){var t,s;let i={};try{let a=this.app.metadataCache.getFileCache(e);if(!a)return this.plugin.settings.showDebugInfo&&console.log(`No cache found for file: ${e.path}`),i;let n=((t=a.frontmatter)==null?void 0:t["kanban-plugin"])==="basic",l=((s=a.headings)==null?void 0:s.filter(g=>g.level===2))||[];if(l.length<1)return this.plugin.settings.showDebugInfo&&console.log(`No H2 headers found in file: ${e.path}`),i;let r=await this.plugin.app.vault.read(e);for(let g=0;g<l.length;g++){let u=l[g],d=u.heading.trim();i[d]={items:[]};let m=u.position.start.offset,C=g<l.length-1?l[g+1].position.start.offset:r.length,h=r.substring(m+u.heading.length+4,C).trim();n?this.extractKanbanPluginItems(h,i[d].items):this.extractMarkdownItems(h,i[d].items)}this.plugin.settings.showDebugInfo&&(console.log(`Parsed Kanban board ${e.path} with columns:`,Object.keys(i)),Object.entries(i).forEach(([g,u])=>{console.log(`Column "${g}" has ${u.items.length} items`)}))}catch(a){console.error(`Error parsing Kanban board ${e.path}:`,a),this.plugin.settings.showDebugInfo&&console.error("Error details:",a)}return i}extractKanbanPluginItems(e,i){let t=e.split(/^- /m).slice(1);for(let s of t){let a="- "+s.trim();i.push({text:a})}}extractMarkdownItems(e,i){let t=e.split(`
`),s="",a=!1;for(let n of t)n.trim().startsWith("- ")?(a&&i.push({text:s.trim()}),s=n,a=!0):a&&(s+=`
`+n);a&&i.push({text:s.trim()})}isKanbanBoard(e){var i;try{let t=this.app.metadataCache.getFileCache(e);if(!t)return this.plugin.settings.showDebugInfo&&console.log(`No cache found for file: ${e.path}`),!1;if(((i=t.frontmatter)==null?void 0:i["kanban-plugin"])==="basic")return this.plugin.settings.showDebugInfo&&console.log(`Detected Kanban plugin board: ${e.path}`),!0;let s=t.headings||[];if(s.length<2)return this.plugin.settings.showDebugInfo&&console.log(`Insufficient headers in file: ${e.path}`),!1;let a=["todo","to do","to-do","backlog","new","ideas","inbox","in progress","doing","working","current","ongoing","done","complete","completed","finished","blocked","waiting"],n=0,l=this.plugin.settings.kanbanCompletedColumn.toLowerCase();for(let g of s){if(g.level!==2)continue;let u=g.heading.toLowerCase();(a.some(d=>u.includes(d))||u===l)&&n++}let r=n>=2;return this.plugin.settings.showDebugInfo&&console.log(`File ${e.path} is ${r?"":"not "}a Kanban board (columns detected: ${n})`),r}catch(t){return console.error(`Error checking if ${e.path} is a Kanban board:`,t),this.plugin.settings.showDebugInfo&&console.error("Error details:",t),!1}}async addFileToKanbanBoard(e){try{if(!this.plugin.settings.autoAddToKanban||!this.plugin.settings.autoAddKanbanBoard)return!1;let i=e.path.toLowerCase(),t=this.plugin.app.vault.configDir.toLowerCase();if(i.includes(`${t}/plugins/progress-tracker`)||i.includes("kanban")||i===this.plugin.settings.autoAddKanbanBoard)return this.plugin.settings.showDebugInfo&&console.log(`Skipping plugin or kanban file: ${e.path}`),!1;let s=this.plugin.settings.autoAddKanbanBoard,a=this.plugin.app.vault.getAbstractFileByPath(s);if(!a||!(a instanceof o.TFile))return this.plugin.settings.showDebugInfo&&console.log(`Could not find Kanban board at path: ${s}`),!1;if(e.path===a.path)return this.plugin.settings.showDebugInfo&&console.log(`Skipping adding kanban board to itself: ${e.path}`),!1;let n=await this.plugin.app.vault.read(a);if(!this.isKanbanBoard(a))return this.plugin.settings.showDebugInfo&&console.log(`File at path ${s} is not a Kanban board`),!1;if(this.containsFileReference(n,e))return this.plugin.settings.showDebugInfo&&console.log(`File ${e.path} is already in Kanban board ${s}`),!1;let l=this.plugin.settings.autoAddKanbanColumn||"Todo";await this.waitForCacheUpdate(e);let r=await this.parseKanbanBoard(a);if(!r||Object.keys(r).length===0)return this.plugin.settings.showDebugInfo&&console.log(`Could not parse Kanban board structure in ${s}`),!1;let g=Object.keys(r).find(w=>w.toLowerCase()===l.toLowerCase());if(g||(g=this.findClosestColumnName(Object.keys(r),l)),!g)return this.plugin.settings.showDebugInfo&&console.log(`Could not find column "${l}" in Kanban board ${s}`),!1;let u=new RegExp(`## ${this.escapeRegExp(g)}\\s*\\n`),d=n.match(u);if(!d)return this.plugin.settings.showDebugInfo&&console.log(`Could not find column "${g}" in Kanban board content`),!1;let m=d.index+d[0].length,C=`- [[${e.basename}]]
`,h=n.substring(0,m)+C+n.substring(m);return await this.plugin.app.vault.modify(a,h),new o.Notice(`Added ${e.basename} to "${g}" column in ${a.basename}`),!0}catch(i){return console.error("Error adding file to Kanban board:",i),this.plugin.settings.showDebugInfo&&console.error("Error details:",i),!1}}},F=class extends o.PluginSettingTab{constructor(e,i){super(e,i);this.plugin=i}display(){let{containerEl:e}=this;e.empty();let i=e.createDiv({cls:"dataview-status"});if(this.plugin.dvAPI?i.createEl("p",{text:"\u2705 Dataview API is available",cls:"dataview-available"}):(i.createEl("p",{text:"\u274C Dataview API is not available",cls:"dataview-unavailable"}),i.createEl("button",{text:"Check for Dataview",cls:"mod-cta"}).addEventListener("click",()=>{this.plugin.checkDataviewAPI(),this.plugin.dvAPI?(new o.Notice("Dataview API found!"),this.display()):new o.Notice("Dataview API not found. Make sure Dataview plugin is installed and enabled.")})),new o.Setting(e).setName("Show debug info").setDesc("Show debug information in the sidebar to help troubleshoot task counting issues").addToggle(t=>t.setValue(this.plugin.settings.showDebugInfo).onChange(async s=>{this.plugin.settings.showDebugInfo=s,await this.plugin.saveSettings(),this.app.workspace.getActiveFile()&&this.plugin.checkDataviewAPI()})),new o.Setting(e).setName("Animation").setHeading(),new o.Setting(e).setName("Show update animation").setDesc("Show a brief animation when updating the progress bar").addToggle(t=>t.setValue(this.plugin.settings.showUpdateAnimation).onChange(async s=>{this.plugin.settings.showUpdateAnimation=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("Performance").setHeading(),new o.Setting(e).setName("Editor change delay").setDesc("Delay before updating after editor content changes (lower = more responsive, higher = better performance)").addSlider(t=>t.setLimits(100,1e3,50).setValue(this.plugin.settings.editorChangeDelay).setDynamicTooltip().onChange(async s=>{this.plugin.settings.editorChangeDelay=s,await this.plugin.saveSettings(),new o.Notice("Editor change delay updated. Restart plugin to apply changes.")})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default (500ms)").onClick(async()=>{this.plugin.settings.editorChangeDelay=500,await this.plugin.saveSettings(),this.display(),new o.Notice("Editor change delay reset. Restart plugin to apply changes.")})),new o.Setting(e).setName("Keyboard input delay").setDesc("Delay after keyboard input before updating progress (in milliseconds)").addSlider(t=>t.setLimits(100,1e3,50).setValue(this.plugin.settings.keyboardInputDelay).setDynamicTooltip().onChange(async s=>{this.plugin.settings.keyboardInputDelay=s,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default (100ms)").onClick(async()=>{this.plugin.settings.keyboardInputDelay=100,await this.plugin.saveSettings(),this.display()})),new o.Setting(e).setName("Checkbox click delay").setDesc("Delay after checkbox click before updating progress (in milliseconds)").addSlider(t=>t.setLimits(100,1e3,50).setValue(this.plugin.settings.checkboxClickDelay).setDynamicTooltip().onChange(async s=>{this.plugin.settings.checkboxClickDelay=s,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default (200ms)").onClick(async()=>{this.plugin.settings.checkboxClickDelay=200,await this.plugin.saveSettings(),this.display()})),new o.Setting(e).setName("Progress bar colors").setHeading(),new o.Setting(e).setName("Color scheme").setDesc("Choose a color scheme for the progress bar").addDropdown(t=>t.addOption("default","Default (Theme Colors)").addOption("red-orange-green","Red-Orange-Blue-Green").addOption("custom","Custom Colors").setValue(this.plugin.settings.progressColorScheme).onChange(async s=>{this.plugin.settings.progressColorScheme=s,s==="red-orange-green"&&(this.plugin.settings.lowProgressColor="#e06c75",this.plugin.settings.mediumProgressColor="#e5c07b",this.plugin.settings.highProgressColor="#61afef",this.plugin.settings.completeProgressColor="#98c379",this.plugin.settings.lowProgressThreshold=30,this.plugin.settings.mediumProgressThreshold=60,this.plugin.settings.highProgressThreshold=99,new o.Notice("Applied Red-Orange-Blue-Green color scheme")),await this.plugin.saveSettings(),this.display();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),this.plugin.settings.progressColorScheme==="custom"&&(new o.Setting(e).setName("Low progress color").setDesc(`Color for progress below ${this.plugin.settings.lowProgressThreshold}%`).addText(t=>t.setValue(this.plugin.settings.lowProgressColor).onChange(async s=>{this.plugin.settings.lowProgressColor=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("Medium progress color").setDesc(`Color for progress between ${this.plugin.settings.lowProgressThreshold}% and ${this.plugin.settings.mediumProgressThreshold}%`).addText(t=>t.setValue(this.plugin.settings.mediumProgressColor).onChange(async s=>{this.plugin.settings.mediumProgressColor=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("High progress color").setDesc(`Color for progress between ${this.plugin.settings.mediumProgressThreshold}% and ${this.plugin.settings.highProgressThreshold}%`).addText(t=>t.setValue(this.plugin.settings.highProgressColor).onChange(async s=>{this.plugin.settings.highProgressColor=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("Complete progress color").setDesc("Color for 100% progress").addText(t=>t.setValue(this.plugin.settings.completeProgressColor).onChange(async s=>{this.plugin.settings.completeProgressColor=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("Low progress threshold").setDesc("Percentage below which progress is considered low").addSlider(t=>t.setLimits(1,99,1).setValue(this.plugin.settings.lowProgressThreshold).setDynamicTooltip().onChange(async s=>{s>=this.plugin.settings.mediumProgressThreshold&&(s=this.plugin.settings.mediumProgressThreshold-1),this.plugin.settings.lowProgressThreshold=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("Medium progress threshold").setDesc("Percentage below which progress is considered medium").addSlider(t=>t.setLimits(1,99,1).setValue(this.plugin.settings.mediumProgressThreshold).setDynamicTooltip().onChange(async s=>{s<=this.plugin.settings.lowProgressThreshold&&(s=this.plugin.settings.lowProgressThreshold+1),s>=this.plugin.settings.highProgressThreshold&&(s=this.plugin.settings.highProgressThreshold-1),this.plugin.settings.mediumProgressThreshold=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)})),new o.Setting(e).setName("High progress threshold").setDesc("Percentage below which progress is considered high (but not complete)").addSlider(t=>t.setLimits(1,99,1).setValue(this.plugin.settings.highProgressThreshold).setDynamicTooltip().onChange(async s=>{s<=this.plugin.settings.mediumProgressThreshold&&(s=this.plugin.settings.mediumProgressThreshold+1),this.plugin.settings.highProgressThreshold=s,await this.plugin.saveSettings();let a=this.app.workspace.getActiveFile();a&&this.plugin.sidebarView&&this.plugin.sidebarView.updateProgressBar(a)}))),new o.Setting(e).setName("Interface").setHeading(),new o.Setting(e).setName("Max tabs height").setDesc("Maximum height for workspace tabs (e.g., 110px, 200px, auto)").addText(t=>(t.setValue(this.plugin.settings.maxTabsHeight),t.inputEl.addEventListener("blur",async()=>{let s=t.inputEl.value;s==="auto"||s==="none"||/^\d+(\.\d+)?(px|em|rem|vh|%)$/.test(s)?this.plugin.settings.maxTabsHeight!==s&&(this.plugin.settings.maxTabsHeight=s,await this.plugin.saveSettings(),new o.Notice(`Max tabs height updated to ${s}`)):(new o.Notice("Please enter 'auto', 'none' or a valid CSS length value (e.g., 110px)"),t.setValue(this.plugin.settings.maxTabsHeight))}),t.inputEl.addEventListener("keydown",async s=>{s.key==="Enter"&&(s.preventDefault(),t.inputEl.blur())}),t.inputEl.style.width="120px",t.inputEl.placeholder="auto",t)).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default (auto)").onClick(async()=>{this.plugin.settings.maxTabsHeight="auto",await this.plugin.saveSettings(),this.display(),new o.Notice("Max tabs height reset to 'auto'")})),new o.Setting(e).setName("Metadata auto-update").setHeading(),new o.Setting(e).setName("Auto-update metadata").setDesc("Automatically update metadata when all tasks are completed").addToggle(t=>t.setValue(this.plugin.settings.autoUpdateMetadata).onChange(async s=>{this.plugin.settings.autoUpdateMetadata=s,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoUpdateMetadata&&(new o.Setting(e).setName("Change status").setDesc("Change 'status: In Progress' to 'status: Completed' when tasks reach 100%").addToggle(t=>t.setValue(this.plugin.settings.autoChangeStatus).onChange(async s=>{this.plugin.settings.autoChangeStatus=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("Update finished date").setDesc("Set 'finished: ' to today's date when tasks reach 100%").addToggle(t=>t.setValue(this.plugin.settings.autoUpdateFinishedDate).onChange(async s=>{this.plugin.settings.autoUpdateFinishedDate=s,await this.plugin.saveSettings()})),this.plugin.settings.autoChangeStatus&&(new o.Setting(e).setName("Todo status label").setDesc("Status label for files with 0% progress").addText(t=>t.setPlaceholder("Todo").setValue(this.plugin.settings.statusTodo).onChange(async s=>{this.plugin.settings.statusTodo=s,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.statusTodo="Todo",await this.plugin.saveSettings(),this.display()})),new o.Setting(e).setName("In progress status label").setDesc("Status label for files with 1-99% progress").addText(t=>t.setPlaceholder("In Progress").setValue(this.plugin.settings.statusInProgress).onChange(async s=>{this.plugin.settings.statusInProgress=s,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.statusInProgress="In Progress",await this.plugin.saveSettings(),this.display()})),new o.Setting(e).setName("Completed status label").setDesc("Status label for files with 100% progress").addText(t=>t.setPlaceholder("Completed").setValue(this.plugin.settings.statusCompleted).onChange(async s=>{this.plugin.settings.statusCompleted=s,await this.plugin.saveSettings()})).addExtraButton(t=>t.setIcon("reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.statusCompleted="Completed",await this.plugin.saveSettings(),this.display()}))),new o.Setting(e).setName("Kanban integration").setHeading(),new o.Setting(e).setName("Update Kanban boards").setDesc("Automatically move cards in Kanban boards based on task status").addToggle(t=>t.setValue(this.plugin.settings.autoUpdateKanban).onChange(async s=>{this.plugin.settings.autoUpdateKanban=s,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoUpdateKanban)){new o.Setting(e).setName("Sync Kanban columns with status").setDesc("Match Kanban column names to status values (Todo, In Progress, Completed)").addToggle(s=>s.setValue(this.plugin.settings.kanbanSyncWithStatus).onChange(async a=>{this.plugin.settings.kanbanSyncWithStatus=a,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.kanbanSyncWithStatus||new o.Setting(e).setName("Completed column name").setDesc("The name of the column where completed items should be moved to (e.g., 'Complete', 'Done', 'Finished')").addText(s=>s.setPlaceholder("Complete").setValue(this.plugin.settings.kanbanCompletedColumn).onChange(async a=>{this.plugin.settings.kanbanCompletedColumn=a,await this.plugin.saveSettings()})).addExtraButton(s=>s.setIcon("reset").setTooltip("Reset to default (Complete)").onClick(async()=>{this.plugin.settings.kanbanCompletedColumn="Complete",await this.plugin.saveSettings(),this.display()})),new o.Setting(e).setName("Auto-detect Kanban boards").setDesc("Automatically detect files that appear to be Kanban boards").addToggle(s=>s.setValue(this.plugin.settings.kanbanAutoDetect).onChange(async a=>{this.plugin.settings.kanbanAutoDetect=a,await this.plugin.saveSettings(),this.display()}));let t=e.createDiv({cls:"kanban-info",attr:{style:"background: var(--background-secondary-alt); padding: 10px; border-radius: 5px; margin-top: 10px;"}});t.createEl("p",{text:"\u2139\uFE0F Column naming tip:",attr:{style:"font-weight: bold; margin: 0 0 5px 0;"}}),t.createEl("p",{text:`To get the best results, name your Kanban columns to match the status values: "${this.plugin.settings.statusTodo}", "${this.plugin.settings.statusInProgress}", and "${this.plugin.settings.statusCompleted}".`,attr:{style:"margin: 0;"}})}new o.Setting(e).setName("Auto-add files to Kanban board").setDesc("Automatically add files with tasks to a specified Kanban board if they're not already there").addToggle(t=>t.setValue(this.plugin.settings.autoAddToKanban).onChange(async s=>{this.plugin.settings.autoAddToKanban=s,await this.plugin.saveSettings(),this.display()})),this.plugin.settings.autoAddToKanban&&(new o.Setting(e).setName("Target Kanban board").setDesc("The path to the Kanban board where files should be added").addText(a=>a.setPlaceholder("path/to/kanban.md").setValue(this.plugin.settings.autoAddKanbanBoard).onChange(async n=>{this.plugin.settings.autoAddKanbanBoard=n,await this.plugin.saveSettings()})),e.createEl("div",{text:"Select Kanban board file:",attr:{style:"margin-left: 36px; margin-bottom: 8px;"}}),e.createEl("div",{attr:{style:"margin-left: 36px; margin-bottom: 12px;"}}).createEl("button",{text:"Browse...",cls:"mod-cta"}).addEventListener("click",async()=>{try{let a=new $(this.app,this.plugin);a.onChooseItem=n=>{n&&(this.plugin.settings.autoAddKanbanBoard=n.path,this.plugin.saveSettings().then(()=>{this.display()}))},a.open()}catch(a){new o.Notice("Error opening file picker. Please enter the path manually."),console.error("File picker error:",a)}}),new o.Setting(e).setName("Target column").setDesc("The column where new files should be added (e.g., 'Todo', 'Backlog')").addText(a=>a.setPlaceholder("Todo").setValue(this.plugin.settings.autoAddKanbanColumn).onChange(async n=>{this.plugin.settings.autoAddKanbanColumn=n,await this.plugin.saveSettings()})).addExtraButton(a=>a.setIcon("reset").setTooltip("Reset to default (Todo)").onClick(async()=>{this.plugin.settings.autoAddKanbanColumn="Todo",await this.plugin.saveSettings(),this.display()})))}},$=class extends o.SuggestModal{constructor(e,i){super(e);this.plugin=i,this.onChooseItem=()=>{}}getSuggestions(e){return this.app.vault.getMarkdownFiles().filter(s=>e?s.path.toLowerCase().includes(e.toLowerCase()):!0)}renderSuggestion(e,i){i.createEl("div",{text:e.path})}onChooseSuggestion(e,i){this.onChooseItem&&this.onChooseItem(e)}};

/* nosourcemap */